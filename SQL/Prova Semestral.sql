-- ************************************************************************************* -- 
-- PROVA SEMESTRAL																		 --
--																						 --
-- ORIENTAÇÕES:																			 --
--  1. A PROVA CONTÉM 10 QUESTÕES, TODAS A SEREM RESPONDIDAS EM CÓDIGO SQL				 --
--  2. AO TERMINAR AS RESPOSTAS, SUBIR O ARQUIVO SQL NA ÁREA DE PROVA DO CLASSROOM		 --
--  3. ATIVIDADE INDIVIDUAL E PERMITE-SE A CONSULTA ÀS ANOTAÇÕES E CÓDIGOS ANTERIORES	 --
--  4. UTILIZAR O DATABASE PEDIDOS PARA REALIZAR ESTA ATIVIDADE							 --
-- ************************************************************************************* -- 

-- 01. DADO O PEDIDO ABAIXO, CONSTRUIR O CÓDIGO PARA CRIAÇÃO DAS TABELAS COM SUAS
--     RESPECTIVAS CHAVES E CONSTRAINTS

-- A. UMA TABELA DE PROJETOS, COM OS CAMPOS PARA ID DO PROJETO (FORMATO NUMÉRICO),
-- NOME DO PROJETO (FORMATO ALFANUMÉRICO), DATA DO PROJETO (FORMATO DE DATA) E CPF DO GESTOR
-- DO PROJETO (FORMATO NUMÉRICO), UM CAMPO PARA OBSERVACOES (FORMATO ALFANUMÉRICO) E UM CAMPO
-- CHAMADO CONTADOR DE PROJETOS (FORMATO NUMÉRICO)

--	CHAVES DA TABELA A:
-- NESTA TABELA, O CAMPO DE ID DO PROJETO, DEVE SER UMA CHAVE PRIMÁRIA E O CPF DO GESTOR DEVE
-- SER UMA CHAVE ESTRANGEIRA LIGADA À TABELA DE FUNCIONÁRIOS

-- OBSERVAÇÕES DA TABELA A:
-- APENAS O CAMPO OBSERVACOES PODE SER NULO E O CAMPO CONTADOR DE PROJETOS DEVE SER UM CAMPO
-- DE AUTONUMERAÇÃO.
-- OS TAMANHOS DE CADA CAMPO PODEM SER DEFINIDOS PELO PROGRAMADOR.

-- B. UMA TABELA DE FUNCIONÁRIOS, CONTENDO OS CAMPOS DE CPF DO FUNCIONÁRIO (FORMATO NUMÉRICO),
-- NOME DO FUNCIONÁRO (FORMATO ALFANUMÉRICO), DATA DE NASCIMENTO (FORMATO DATA) E SALARIO DO
-- FUNCIONÁRIO (FORMATO MONETÁRIO)

--  CHAVES DA TABELA B:
-- NESTA TABELA, O CAMPO DE CPF DO FUNCIONÁRIO SERÁ UMA CHAVE PRIMÁRIA

-- OBSERVAÇÕES DA TABELA B:
-- NENHUM CAMPO PODE SER NULO NESTA TABELA.

CREATE TABLE FUNCIONARIOS {
	CPF					INT				NOT NULL,
	NOME				VARCHAR(255)	NOT NULL,
	DATA_NASCIMENTO		DATE			NOT NULL,
	SALARIO				SMALLMONEY		NOT NULL

	CONSTRAINT pk_FUNCIONARIO_CPF PRIMARY KEY (CPF)
}

CREATE TABLE PROJETOS {
	ID_PROJETO			INT				NOT NULL,
	NOME_PROJETO		VARCHAR(255)	NOT NULL,
	DATA_PROJETO		DATE			NOT NULL,
	CPF_GESTOR			INT				NOT NULL,
	OBSERVACOES			VARCHAR(255),
	CONTADOR_PROJETO	INT				NOT NULL

	CONSTRAINT pk_PROJETOS_idPROJETO PRIMARY KEY (ID_PROJETO)
	CONSTRAINT fk_PROJETOS_cpfGESTOR FOREIGN KEY (CPF_GESTOR) REFERENCES FUNCIONARIOS (CPF)
}

-- DICA: SE VOCÊ FIZER PRIMEIRO A TABELA "b" E DEPOIS A TABELA "a", A CHANCE DE ERRO É MENOR!

USE PEDIDOS
-- 02. CRIAR UM RANKING COM OS 10 FUNCIONÁRIOS QUE POSSUEM OS MAIORES PREMIOS MENSAIS E QUE
-- NÃO SEJAM DOS DEPARTAMENTOS DE 1 A 5 E NEM DOS CARGOS DE 10 A 15
-- OBS.: NESTA CONSULTA, TRAZER TODOS OS CAMPOS DA TABELA

SELECT TOP(10)*
FROM TB_EMPREGADO
WHERE COD_DEPTO NOT IN (1, 2, 3, 4, 5)
	AND COD_CARGO NOT IN (10, 11, 12, 13, 14, 15)
ORDER BY PREMIO_MENSAL DESC

-- 03. UTILIZANDO A BUSCA POR CARACTERES NA TABELA DE FORNECEDORES, RESPONDER AS SEGUINTES QUESTÕES:
-- A. IDENTIFICAR OS FORNECEDORES QUE POSSUAM A PALAVRA "COMERCIO"

SELECT *
FROM TB_FORNECEDOR
WHERE NOME LIKE ('%COMERCIO%')

-- B. RETORNAR APENAS OS FORNECEDORES QUE POSSUAM NA SEGUNDA LETRA UMA CONSOANTE E TERMINEM COMO UMA VOGAL

SELECT *
FROM TB_FORNECEDOR
WHERE NOME LIKE ('_[E]%[AEIOU]')
ORDER BY 2

-- 04. EXIBIR A SOMA DE VALORES DOS PEDIDOS (TB_PEDIDO) E A QUANTIDADE DE PEDIDOS, 
---    AGRUPANDO POR MÊS E POR ANO.
--     NESTE EXERCÍCIO, VOCÊ RETORNAR RETORNAR O ANO E MÊS NO SEGUINTE FORMATO: AAAA/MM

SELECT	SUM(VLR_TOTAL) [SOMA VALORES],
		COUNT(NUM_PEDIDO) [QTD PEDIDOS],
		FORMAT(DATA_EMISSAO, 'yyyy/MM') [DATA]
FROM TB_PEDIDO
GROUP BY FORMAT(DATA_EMISSAO, 'yyyy/MM')
ORDER BY 3

-- 05. UTILIZANDO A TABELA DE CLIENTES, EXIBIR QUAL O NOME DO CLIENTE CADASTRADO A MAIS TEMPO

SELECT TOP(1)NOME FROM TB_CLIENTE
WHERE DATA_CAD IS NOT NULL
ORDER BY DATA_CAD ASC

-- 06. ATUALIZAR A TABELA DE ITENS DE PEDIDOS CONFORME DESCRIÇÃO ABAIXO:
--     A. CASO O CAMPO QUANTIDADE POSSUA VALORES DE 000 A 500, ATUALIZAR O DESCONTO PARA 10

BEGIN TRAN
UPDATE TB_ITENSPEDIDO SET DESCONTO = 10
	OUTPUT 
	deleted.DESCONTO,
	inserted.DESCONTO
WHERE QUANTIDADE BETWEEN 0 AND 500
ROLLBACK TRAN
COMMIT TRAN

--     B. CASO O CAMPO QUANTIDADE POSSUA VALORES DE 501 A 999, ATUALIZAR O DESCONTO PARA 15 E A SITUAÇÃO PARA 'K'

BEGIN TRAN
UPDATE TB_ITENSPEDIDO 
	SET DESCONTO = 15, SITUACAO = 'K'
	OUTPUT 
	deleted.DESCONTO,
	inserted.DESCONTO
WHERE QUANTIDADE BETWEEN 501 AND 999
ROLLBACK TRAN
COMMIT TRAN

--     C. DELETAR OS ITENS QUE POSSUAM QUANTIDADE A PARTIR DE 1000

BEGIN TRAN
DELETE FROM TB_ITENSPEDIDO
	OUTPUT deleted.QUANTIDADE
WHERE QUANTIDADE >= 1000
ROLLBACK TRAN
COMMIT TRAN

-- 07. TRAZER O NOME DE TODOS OS COLABORADORES, INDEPENDENTEMENTE DE TEREM OU NÃO DEPENDENTES. PARA OS QUE TIVEREM, 
-- TRAZER O NOME DOS DEPENDENTES TAMBÉM, PARA OS QUE NÃO TIVEREM, TRATAR O CAMPO COM A INFORMAÇÃO "NÃO POSSUI DEPENDENTES"

SELECT EMP.NOME [COLABORADOR NOME], 
		ISNULL(DEP.NOME, 'NÃO POSSUI DEPENDENTES') [NOME DEPENDENTE]
FROM TB_DEPENDENTE DEP
RIGHT JOIN TB_EMPREGADO EMP ON EMP.CODFUN = DEP.CODFUN
ORDER BY 1

-- 08. EXIBIR O TOTAL DE PEDIDOS (EM VALOR MONETÁRIO), AGRUPANDO POR NOME DO VENDEDOR, APENAS PARA PEDIDOS FEITOS EM 2018

SELECT SUM(PED.VLR_TOTAL) [VALOR MONETARIO],
		VEN.NOME
FROM TB_PEDIDO PED
JOIN TB_VENDEDOR VEN ON PED.CODVEN = VEN.CODVEN
WHERE YEAR(PED.DATA_EMISSAO) = 2018
GROUP BY VEN.NOME

-- 09. DETERMINAR QUAIS OS 10 CLIENTES QUE MAIS COMPRARAM, DE ACORDO COM OS ELEMENTOS DA TABELA DE PEDIDOS
--     NESTA CONSULTA, RETORNAR: 
--     1. NOME DO CLIENTE
--     2. SOMA DE VALORES COMPRADOS
--     3. QUANTIDADE DE PEDIDOS JÁ FEITOS
--     4. QUANTOS ANOS ESTE CLIENTE ESTÁ CADASTRADO NA EMPRESA (CONFORME TABELA TB_CLIENTE)

SELECT TOP(10) CL.NOME,
			SUM(PE.VLR_TOTAL)		[SOMA VALORES COMPRADOS],
			COUNT(PE.NUM_PEDIDO)	[QUANTIDADE DE PEDIDOS],
			YEAR(GETDATE()) - YEAR(DATA_CAD) AS [TEMPO DE CADASTRO EM ANOS]
FROM TB_PEDIDO PE
JOIN TB_CLIENTE CL ON PE.CODCLI = CL.CODCLI
GROUP BY CL.NOME, YEAR(GETDATE()) - YEAR(DATA_CAD)
ORDER BY 2 DESC

-- 10. DE ACORDO COM A ESTRUTURA ABAIXO RETORNAR A RELAÇÃO DE PRODUTOS COM SEUS RESPECTIVOS FORNECEDORES
--     A. IDENTIFICAR QUAIS PRODUTOS POSSUEM FORNECEDOR CORRETAMENTE CADASTRADO

SELECT	PR.DESCRICAO [PRODUTO],
		FO.NOME [FORNECEDOR]
FROM TB_PRODUTO PR
JOIN TB_PROD_FORN PRF ON PRF.ID_PRODUTO = PR.ID_PRODUTO
JOIN TB_FORNECEDOR FO ON FO.COD_FORNECEDOR = PRF.COD_FORNECEDOR
ORDER BY 1

--     B. IDENTIFICAR SE TEMOS PRODUTOS SEM O DEVIDO FORNECEDOR

SELECT *
FROM TB_PRODUTO 
WHERE ID_PRODUTO NOT IN (SELECT ID_PRODUTO FROM TB_PROD_FORN)

SELECT	PR.DESCRICAO [PRODUTO],
		FO.NOME [FORNECEDOR]
FROM TB_PRODUTO PR
FULL JOIN TB_PROD_FORN PRF ON PRF.ID_PRODUTO = PR.ID_PRODUTO
FULL JOIN TB_FORNECEDOR FO ON FO.COD_FORNECEDOR = PRF.COD_FORNECEDOR
WHERE FO.NOME IS NULL
ORDER BY 1

--SELECT  ID_PRODUTO FROM TB_PRODUTO
--SELECT DISTINCT ID_PRODUTO FROM TB_PROD_FORN

--     C. IDENTIFICAR SE TEMOS FORNECEDOR SEM PRODUTOS CADASTRADOS

SELECT *
FROM TB_FORNECEDOR 
WHERE COD_FORNECEDOR NOT IN (SELECT COD_FORNECEDOR FROM TB_PROD_FORN)

SELECT	FO.NOME [FORNECEDOR],
		PR.DESCRICAO [PRODUTO]
FROM TB_PRODUTO PR
FULL JOIN TB_PROD_FORN PRF ON PRF.ID_PRODUTO = PR.ID_PRODUTO
FULL JOIN TB_FORNECEDOR FO ON FO.COD_FORNECEDOR = PRF.COD_FORNECEDOR
WHERE PR.DESCRICAO IS NULL
ORDER BY 1

-- ************************************************************************************* -- 
-- BOA PROVA !!!																		 --
-- ************************************************************************************* -- 